/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SidebarRouteImport } from './routes/_sidebar'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SidebarDashboardRouteImport } from './routes/_sidebar/dashboard'
import { Route as SidebarSettingsIndexRouteImport } from './routes/_sidebar/settings/index'
import { Route as SidebarAccountsIndexRouteImport } from './routes/_sidebar/accounts/index'
import { Route as SidebarAccountsAccountIdRouteImport } from './routes/_sidebar/accounts/$accountId'

const SidebarRoute = SidebarRouteImport.update({
  id: '/_sidebar',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SidebarDashboardRoute = SidebarDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => SidebarRoute,
} as any)
const SidebarSettingsIndexRoute = SidebarSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => SidebarRoute,
} as any)
const SidebarAccountsIndexRoute = SidebarAccountsIndexRouteImport.update({
  id: '/accounts/',
  path: '/accounts/',
  getParentRoute: () => SidebarRoute,
} as any)
const SidebarAccountsAccountIdRoute =
  SidebarAccountsAccountIdRouteImport.update({
    id: '/accounts/$accountId',
    path: '/accounts/$accountId',
    getParentRoute: () => SidebarRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof SidebarRouteWithChildren
  '/dashboard': typeof SidebarDashboardRoute
  '/accounts/$accountId': typeof SidebarAccountsAccountIdRoute
  '/accounts': typeof SidebarAccountsIndexRoute
  '/settings': typeof SidebarSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof SidebarRouteWithChildren
  '/dashboard': typeof SidebarDashboardRoute
  '/accounts/$accountId': typeof SidebarAccountsAccountIdRoute
  '/accounts': typeof SidebarAccountsIndexRoute
  '/settings': typeof SidebarSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_sidebar': typeof SidebarRouteWithChildren
  '/_sidebar/dashboard': typeof SidebarDashboardRoute
  '/_sidebar/accounts/$accountId': typeof SidebarAccountsAccountIdRoute
  '/_sidebar/accounts/': typeof SidebarAccountsIndexRoute
  '/_sidebar/settings/': typeof SidebarSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/dashboard'
    | '/accounts/$accountId'
    | '/accounts'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/dashboard'
    | '/accounts/$accountId'
    | '/accounts'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/_sidebar'
    | '/_sidebar/dashboard'
    | '/_sidebar/accounts/$accountId'
    | '/_sidebar/accounts/'
    | '/_sidebar/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SidebarRoute: typeof SidebarRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_sidebar': {
      id: '/_sidebar'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SidebarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_sidebar/dashboard': {
      id: '/_sidebar/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof SidebarDashboardRouteImport
      parentRoute: typeof SidebarRoute
    }
    '/_sidebar/settings/': {
      id: '/_sidebar/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SidebarSettingsIndexRouteImport
      parentRoute: typeof SidebarRoute
    }
    '/_sidebar/accounts/': {
      id: '/_sidebar/accounts/'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof SidebarAccountsIndexRouteImport
      parentRoute: typeof SidebarRoute
    }
    '/_sidebar/accounts/$accountId': {
      id: '/_sidebar/accounts/$accountId'
      path: '/accounts/$accountId'
      fullPath: '/accounts/$accountId'
      preLoaderRoute: typeof SidebarAccountsAccountIdRouteImport
      parentRoute: typeof SidebarRoute
    }
  }
}

interface SidebarRouteChildren {
  SidebarDashboardRoute: typeof SidebarDashboardRoute
  SidebarAccountsAccountIdRoute: typeof SidebarAccountsAccountIdRoute
  SidebarAccountsIndexRoute: typeof SidebarAccountsIndexRoute
  SidebarSettingsIndexRoute: typeof SidebarSettingsIndexRoute
}

const SidebarRouteChildren: SidebarRouteChildren = {
  SidebarDashboardRoute: SidebarDashboardRoute,
  SidebarAccountsAccountIdRoute: SidebarAccountsAccountIdRoute,
  SidebarAccountsIndexRoute: SidebarAccountsIndexRoute,
  SidebarSettingsIndexRoute: SidebarSettingsIndexRoute,
}

const SidebarRouteWithChildren =
  SidebarRoute._addFileChildren(SidebarRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SidebarRoute: SidebarRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
